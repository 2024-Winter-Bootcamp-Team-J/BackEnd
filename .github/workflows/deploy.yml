name: Deploy to EC2

on:
  push:
    branches:
      - chore/prod  # 해당 브랜치에 푸시될 때 배포 실행

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build and Push Docker images (multi-platform)
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -f docker-compose-prod.yml -t gisu1102/2025techer:latest --push

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # EC2 서버에서 먼저 Docker 및 Docker Compose가 설치되어 있는지 확인
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose is not installed. Installing Docker Compose..."
              sudo apt install -y curl
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # .env 파일을 GitHub Secrets에서 가져와서 EC2에 복사
            echo "Copying .env file from GitHub Secrets..."
            echo "${{ secrets.MY_ENV_FILE }}" > .env

            # .env 파일이 제대로 생성되었는지 확인 (선택 사항)
            cat .env

            
            # 해당 프로젝트 폴더로 이동 (필요한 경우)
            #cd 
            
            # 최신 Docker 이미지를 가져오기 (docker-compose-prod.yml에 정의된 모든 서비스에 대해 pull 실행)
            echo "Pulling the latest Docker images..."
            docker-compose -f docker-compose-prod.yml pull

            # 컨테이너를 새로 빌드하고 백그라운드에서 실행
            echo "Starting Docker containers..."
            docker-compose -f docker-compose-prod.yml up -d --build

            # 배포가 성공적으로 완료된 후, 상태 확인
            docker ps