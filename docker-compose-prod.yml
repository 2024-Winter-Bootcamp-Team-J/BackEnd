version: '3'

services:
  web:
    image: gisu1102/2025techer:web
    container_name: web
    env_file:
      - .env
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/code/static
      - media_volume:/code/media
    ports:
      - "8000:8000"
    networks:
      - backend-network

  nginx:
    image: gisu1102/2025techer:nginx
    container_name: nginx
    volumes:
      - ./nginx_logs:/var/log/nginx
      - static_volume:/code/static
      - media_volume:/code/media
    ports:
      - "80:80"
    restart: always
    depends_on:
      - web
    networks:
      - backend-network


  redis:
    image: redis:latest
    container_name: redis
    env_file:
      - .env
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend-network

  # Celery 워커
  celery:
    container_name: celery_worker
    build: .
    command: celery -A myCelery worker --loglevel=info
    depends_on:
      - rabbitmq
      - web
      - redis
    networks:
      - backend-network

  # Celery Beat (주기적 작업 실행)
  celery-beat:
    container_name: celery_beat
    build: .
    command: celery -A myCelery beat --loglevel=info
    depends_on:
      - web
      - rabbitmq
      - celery
    networks:
      - backend-network

  # RabbitMQ 서비스
  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_USER: linkin
      RABBITMQ_PASSWORD: linkin
    ports:
      - "15672:15672"  # RabbitMQ 웹 UI (관리 페이지)
      - "5672:5672"    # RabbitMQ 브로커 포트
    networks:
      - backend-network



volumes:
  static_volume:
  media_volume:

networks:
  backend-network:
    driver: bridge