version: '3'

services:
  web:
    image: gisu1102/2025techer:web
    container_name: web
    env_file:
      - .env
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - logstash_volume:/code/logstash
      - ./django_logs:/code/django_logs
      - static_volume:/code/static
      - media_volume:/code/media
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - rabbitmq
      - opensearch
    networks:
      - backend-network

  nginx:
    image: gisu1102/2025techer:nginx
    container_name: nginx
    volumes:
      - ./nginx_logs:/var/log/nginx
      - static_volume:/code/static
      - media_volume:/code/media
    ports:
      - "80:80"
    restart: always
    depends_on:
      - web
    networks:
      - backend-network


  redis:
    image: redis:latest
    container_name: redis
    env_file:
      - .env
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend-network

  # Celery 워커
  celery:
    image: gisu1102/2025techer:celery-worker
    container_name: celery_worker
    env_file:
      - .env
    volumes:
      - ./django_logs:/code/django_logs
    command: celery -A myCelery worker --loglevel=info
    depends_on:
      - rabbitmq
      - web
      - redis
    networks:
      - backend-network

  # Celery Beat (주기적 작업 실행)
  celery-beat:
    image: gisu1102/2025techer:celery-beat
    container_name: celery_beat
    env_file:
      - .env
    volumes:
      - ./django_logs:/code/django_logs
    command: celery -A myCelery beat --loglevel=info
    depends_on:
      - web
      - rabbitmq
      - celery
    networks:
      - backend-network

  # RabbitMQ 서비스
  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_USER: linkin
      RABBITMQ_PASSWORD: linkin
    ports:
      - "15672:15672"  # RabbitMQ 웹 UI (관리 페이지)
      - "5672:5672"    # RabbitMQ 브로커 포트
    networks:
      - backend-network

  opensearch:
    image: opensearchproject/opensearch:latest
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Link-in1234

    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - backend-network


# OpenSearch 대시보드
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      - OPENSEARCH_HOSTS=https://opensearch:9200
      - OPENSEARCH_DASHBOARDS_SECURITY_AUTH_ANONYMOUS_ENABLED=true  # 기본값 false
      - OPENSEARCH_DASHBOARDS_SERVER_BASEPATH=/dashboards
    networks:
      - backend-network

  # Logstash
  logstash:
    image: opensearchproject/logstash-oss-with-opensearch-output-plugin:latest
    container_name: logstash
    volumes:
      # logstash_volume에 있는 logstash.conf를 logstash 컨테이너 내부로 마운트
      - logstash_volume:/usr/share/logstash/pipeline  # logstash.conf 파일 마운트
      - ./django_logs:/usr/share/logstash/logs
    networks:
      - backend-network
    depends_on:
      - web

volumes:
  static_volume:
  media_volume:
  opensearch_data:
  logstash_volume:

networks:
  backend-network:
    driver: bridge